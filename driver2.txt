#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/usb.h>
#include <linux/version.h>

#include<linux/slab.h> /* thu vien chua ham kmalloc */
#include<linux/uaccess.h> 

// Định nghĩa ID của root hub 1.1
#define USB_LF_11_ROOT_HUB_VENDOR_ID 0x0000
#define USB_LF_11_ROOT_HUB_PRODUCT_ID 0x0001


#define MIN(a,b) (((a) <= (b)) ? (a) : (b))
#define BULK_EP_OUT 0x02
#define BULK_EP_IN 0x81

#define MAX_PKT_SIZE 512
#define VENDOR_SANDISK 0x0781
#define PRODUCT_USB30 0x5591


static struct usb_device *usb_flash;
static struct usb_class_driver class;
static unsigned char bulk_buf[MAX_PKT_SIZE];

//dinh nghia cac ham thao tac
static int usb_flash_open(struct inode *i, struct file *f)
{
	return 0;
}

static int usb_flash_close(struct inode *i, struct file *f)
{
	return 0;
}

static ssize_t usb_flash_read(struct file *f, char __user *buf, size_t cnt, loff_t *off)
{
	int retval;
	int read_cnt;

	/* Doc du lieu tu usb flash */
	retval = usb_bulk_msg(usb_flash, usb_rcvbulkpipe(usb_flash, BULK_EP_IN),
	        bulk_buf, MAX_PKT_SIZE, &read_cnt, 5000);
	if (retval)
	{
		printk(KERN_ERR "read bulk message returned %d\n", retval);
		return retval;
	}
	if (copy_to_user(buf, bulk_buf, MIN(cnt, read_cnt)))
	{
		return -EFAULT;
	}
	
	return MIN(cnt, read_cnt);
}

static ssize_t usb_flash_write(struct file *f, const char __user *buf, size_t cnt, loff_t *off)
{
	int retval;
	int wrote_cnt = MIN(cnt, MAX_PKT_SIZE);

	if (copy_from_user(bulk_buf, buf, MIN(cnt, MAX_PKT_SIZE)))
	{
		return -EFAULT;
	}
	/* ghi du lieu vao usb flash */
	retval = usb_bulk_msg(usb_flash, usb_sndbulkpipe(usb_flash, BULK_EP_OUT),
		bulk_buf, MIN(cnt, MAX_PKT_SIZE), &wrote_cnt, 5000);
	if (retval)
	{
		printk(KERN_ERR "write bulk message returned %d\n", retval);
		return retval;
	}

	return wrote_cnt;
}

static struct file_operations fops =
{
	.owner = THIS_MODULE,
	.open = usb_flash_open,
	.release = usb_flash_close,
	.read = usb_flash_read,
	.write = usb_flash_write,
};

static struct usb_device_id usb_lf_11_root_hub_id_table[] = {
    {USB_DEVICE(USB_LF_11_ROOT_HUB_VENDOR_ID, USB_LF_11_ROOT_HUB_PRODUCT_ID)},
    {}
};
MODULE_DEVICE_TABLE(usb, usb_lf_11_root_hub_id_table);

// Hàm thực hiện khi ổ đĩa được kết nối
static int usb_lf_11_root_hub_probe(struct usb_interface *interface, const struct usb_device_id *id)
{
    printk(KERN_ALERT "The USB LF 1.1 Root Hub has been connected!\n");
    return 0;
}   

// Hàm thực hiện khi ổ đĩa bị ngắt kết nối
static void usb_lf_11_root_hub_disconnect(struct usb_interface *interface)
{
    printk(KERN_ALERT "The USB LF 1.1 Root Hub has been disconnected!\n");
}

// Khởi tạo driver
static struct usb_driver usb_lf_11_root_hub_driver = {
    .name = "USB LF 1.1 Root Hub Driver",
    .probe = usb_lf_11_root_hub_probe,
    .disconnect = usb_lf_11_root_hub_disconnect,
    .id_table = usb_lf_11_root_hub_id_table,
};

// Hàm khởi động driver
static int __init usb_lf_11_root_hub_init(void)
{
    int result;

    // Đăng ký driver với hệ thống
    result = usb_register(&usb_lf_11_root_hub_driver);

    if (result) {
        printk(KERN_ALERT "Unable to register USB LF 1.1 Root Hub Driver: %d\n", result);
        goto exit;
    }

    printk(KERN_ALERT "USB LF 1.1 Root Hub Driver Initialized.\n");

exit:
    return result;
}

// Hàm kết thúc driver
static void __exit usb_lf_11_root_hub_exit(void)
{
    // Hủy đăng ký driver khỏi hệ thống
    usb_deregister(&usb_lf_11_root_hub_driver);

    printk(KERN_ALERT "USB LF 1.1 Root Hub Driver Exited.\n");
}

module_init(usb_lf_11_root_hub_init);
module_exit(usb_lf_11_root_hub_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("USB LF 1.1 Root Hub Driver");
